#!/usr/bin/env python

"""
Query tool for SingleCellFeatureProfiler results.

This script provides a lightweight command-line interface for querying and
inspecting TSV output files generated by the main scfeatureprofiler analysis.
It does not use the core engine but instead parses existing results files.
"""

import argparse
import sys
from pathlib import Path
from typing import List, Optional

import pandas as pd


def load_results(file_path: str) -> pd.DataFrame:
    """
    Load results from a TSV file generated by scfeatureprofiler.
    
    Parameters
    ----------
    file_path : str
        Path to the TSV results file.
        
    Returns
    -------
    pd.DataFrame
        Loaded results DataFrame.
        
    Raises
    ------
    FileNotFoundError
        If the file doesn't exist.
    ValueError
        If the file format is invalid.
    """
    if not Path(file_path).exists():
        raise FileNotFoundError(f"Results file not found: {file_path}")
    
    try:
        df = pd.read_csv(file_path, sep='\t')
    except Exception as e:
        raise ValueError(f"Failed to read TSV file: {e}")
    
    # Validate expected columns
    expected_cols = ['gene_id', 'group_name', 'norm_score', 'pct_expressing']
    missing_cols = [col for col in expected_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing expected columns: {missing_cols}")
    
    return df


def query_genes(df: pd.DataFrame, genes: List[str]) -> pd.DataFrame:
    """
    Query specific genes from the results.
    
    Parameters
    ----------
    df : pd.DataFrame
        Results DataFrame.
    genes : List[str]
        List of gene IDs to query.
        
    Returns
    -------
    pd.DataFrame
        Filtered results for the specified genes.
    """
    if not genes:
        return df
    
    # Case-insensitive matching
    available_genes = df['gene_id'].str.lower().unique()
    query_genes_lower = [g.lower() for g in genes]
    
    # Find missing genes
    missing = [g for g in genes if g.lower() not in available_genes]
    if missing:
        print(f"Warning: The following genes were not found: {missing}", file=sys.stderr)
    
    # Filter for available genes
    mask = df['gene_id'].str.lower().isin(query_genes_lower)
    return df[mask]


def query_groups(df: pd.DataFrame, groups: List[str]) -> pd.DataFrame:
    """
    Query specific cell groups from the results.
    
    Parameters
    ----------
    df : pd.DataFrame
        Results DataFrame.
    groups : List[str]
        List of group names to query.
        
    Returns
    -------
    pd.DataFrame
        Filtered results for the specified groups.
    """
    if not groups:
        return df
    
    # Case-insensitive matching
    available_groups = df['group_name'].str.lower().unique()
    query_groups_lower = [g.lower() for g in groups]
    
    # Find missing groups
    missing = [g for g in groups if g.lower() not in available_groups]
    if missing:
        print(f"Warning: The following groups were not found: {missing}", file=sys.stderr)
    
    # Filter for available groups
    mask = df['group_name'].str.lower().isin(query_groups_lower)
    return df[mask]


def apply_filters(df: pd.DataFrame, args: argparse.Namespace) -> pd.DataFrame:
    """
    Apply various filters to the results DataFrame.
    
    Parameters
    ----------
    df : pd.DataFrame
        Results DataFrame.
    args : argparse.Namespace
        Parsed command-line arguments.
        
    Returns
    -------
    pd.DataFrame
        Filtered DataFrame.
    """
    filtered_df = df.copy()
    
    # Filter by significance thresholds
    if args.fdr_presence is not None:
        if 'fdr_presence' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['fdr_presence'] <= args.fdr_presence]
        else:
            print("Warning: fdr_presence column not found, skipping filter", file=sys.stderr)
    
    if args.fdr_marker is not None:
        if 'fdr_marker' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['fdr_marker'] <= args.fdr_marker]
        else:
            print("Warning: fdr_marker column not found, skipping filter", file=sys.stderr)
    
    # Filter by expression thresholds
    if args.min_norm_score is not None:
        filtered_df = filtered_df[filtered_df['norm_score'] >= args.min_norm_score]
    
    if args.min_pct_expressing is not None:
        filtered_df = filtered_df[filtered_df['pct_expressing'] >= args.min_pct_expressing]
    
    # Filter by specificity
    if args.min_specificity is not None:
        if 'specificity_tau' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['specificity_tau'] >= args.min_specificity]
        else:
            print("Warning: specificity_tau column not found, skipping filter", file=sys.stderr)
    
    return filtered_df


def format_output(df: pd.DataFrame, args: argparse.Namespace) -> None:
    """
    Format and display the output results.
    
    Parameters
    ----------
    df : pd.DataFrame
        Results DataFrame to display.
    args : argparse.Namespace
        Parsed command-line arguments.
    """
    if df.empty:
        print("No results match the specified criteria.")
        return
    
    # Sort results
    sort_cols = []
    if args.sort_by == 'norm_score':
        sort_cols = ['norm_score']
    elif args.sort_by == 'pct_expressing':
        sort_cols = ['pct_expressing']
    elif args.sort_by == 'specificity':
        if 'specificity_tau' in df.columns:
            sort_cols = ['specificity_tau']
        else:
            print("Warning: specificity_tau column not found, sorting by gene_id", file=sys.stderr)
            sort_cols = ['gene_id']
    elif args.sort_by == 'significance':
        if 'fdr_presence' in df.columns:
            sort_cols = ['fdr_presence']
        else:
            sort_cols = ['gene_id']
    else:  # default: gene_id
        sort_cols = ['gene_id', 'group_name']
    
    df_sorted = df.sort_values(sort_cols, ascending=not args.descending)
    
    # Limit number of results
    if args.top is not None:
        df_sorted = df_sorted.head(args.top)
    
    # Select columns to display
    display_cols = ['gene_id', 'group_name', 'norm_score', 'pct_expressing']
    if 'fdr_presence' in df_sorted.columns:
        display_cols.append('fdr_presence')
    if 'fdr_marker' in df_sorted.columns:
        display_cols.append('fdr_marker')
    if 'specificity_tau' in df_sorted.columns:
        display_cols.append('specificity_tau')
    
    # Format output
    if args.output_format == 'tsv':
        df_sorted[display_cols].to_csv(sys.stdout, sep='\t', index=False, float_format='%.4g')
    elif args.output_format == 'csv':
        df_sorted[display_cols].to_csv(sys.stdout, index=False, float_format='%.4g')
    else:  # table format
        print(df_sorted[display_cols].to_string(index=False, float_format=lambda x: f'{x:.4g}'))


def print_summary(df: pd.DataFrame) -> None:
    """
    Print a summary of the results.
    
    Parameters
    ----------
    df : pd.DataFrame
        Results DataFrame.
    """
    if df.empty:
        print("No data to summarize.")
        return
    
    print(f"Summary of results:")
    print(f"  Total entries: {len(df)}")
    print(f"  Unique genes: {df['gene_id'].nunique()}")
    print(f"  Unique groups: {df['group_name'].nunique()}")
    print(f"  Average norm_score: {df['norm_score'].mean():.4f}")
    print(f"  Average pct_expressing: {df['pct_expressing'].mean():.2f}%")
    
    if 'fdr_presence' in df.columns:
        sig_presence = (df['fdr_presence'] < 0.05).sum()
        print(f"  Significant presence tests (p<0.05): {sig_presence}")
    
    if 'fdr_marker' in df.columns:
        sig_marker = (df['fdr_marker'] < 0.05).sum()
        print(f"  Significant marker tests (p<0.05): {sig_marker}")
    
    print()


def main():
    """Main entry point for the query tool."""
    parser = argparse.ArgumentParser(
        description="Query and inspect SingleCellFeatureProfiler results",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    # Input/output
    parser.add_argument(
        "results_file",
        help="Path to the TSV results file from scfeatureprofiler"
    )
    parser.add_argument(
        "--output-format",
        choices=['table', 'tsv', 'csv'],
        default='table',
        help="Output format"
    )
    
    # Query filters
    parser.add_argument(
        "--genes",
        nargs='+',
        help="Specific genes to query (case-insensitive)"
    )
    parser.add_argument(
        "--groups",
        nargs='+',
        help="Specific cell groups to query (case-insensitive)"
    )
    
    # Threshold filters
    parser.add_argument(
        "--fdr-presence",
        type=float,
        help="Maximum FDR for presence test (e.g., 0.05)"
    )
    parser.add_argument(
        "--fdr-marker",
        type=float,
        help="Maximum FDR for marker test (e.g., 0.05)"
    )
    parser.add_argument(
        "--min-norm-score",
        type=float,
        help="Minimum normalized score (0-1)"
    )
    parser.add_argument(
        "--min-pct-expressing",
        type=float,
        help="Minimum percentage of cells expressing (0-100)"
    )
    parser.add_argument(
        "--min-specificity",
        type=float,
        help="Minimum specificity tau score (0-1)"
    )
    
    # Output options
    parser.add_argument(
        "--sort-by",
        choices=['gene_id', 'norm_score', 'pct_expressing', 'specificity', 'significance'],
        default='gene_id',
        help="Column to sort by"
    )
    parser.add_argument(
        "--descending",
        action='store_true',
        help="Sort in descending order"
    )
    parser.add_argument(
        "--top",
        type=int,
        help="Show only top N results"
    )
    parser.add_argument(
        "--summary",
        action='store_true',
        help="Show summary statistics"
    )
    
    args = parser.parse_args()
    
    try:
        # Load results
        df = load_results(args.results_file)
        
        # Apply gene and group filters
        if args.genes:
            df = query_genes(df, args.genes)
        
        if args.groups:
            df = query_groups(df, args.groups)
        
        # Apply threshold filters
        df = apply_filters(df, args)
        
        # Show summary if requested
        if args.summary:
            print_summary(df)
        
        # Format and display output
        format_output(df, args)
        
    except (FileNotFoundError, ValueError) as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
